{"version":3,"sources":["lib/Deck/_types.ts","components/Card/Card.tsx","lib/Deck/Deck.ts","App/App.tsx","reportWebVitals.js","index.tsx"],"names":["Color","Card","card","forvardedRef","onTransitionEnd","isBack","className","ref","style","color","undefined","value","rule","Deck","cardSuits","Black","Red","cardValues","deck","this","initDeck","forEach","suit","push","shuffle","j","temp","i","length","Math","floor","random","deckInstace","App","useState","setDeck","shouldShowBackCard","setShouldShowBackCard","cardRef","useRef","useEffect","console","log","getTotalCard","onClick","current","transform","transition","newDeck","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7de3f2f.chunk.js","sourcesContent":["export enum Color {\n  Black = \"#000\",\n  Red = \"#f00\",\n}\n\nexport type CardSuit = {\n  value: string;\n  color: Color;\n};\n\nexport type CardValue = {\n  value: string;\n  rule: string;\n};\n\nexport type Card = {\n  value: string;\n  color: Color;\n  rule: string;\n};\n","import React, { FC, Ref } from \"react\";\nimport { Card as CardType } from \"../../lib/Deck\";\nimport \"./Card.css\";\n\ntype Props = {\n  card?: CardType;\n  forvardedRef?: Ref<HTMLDivElement>;\n  onTransitionEnd?(): void;\n  isBack?: boolean;\n};\n\nexport const Card: FC<Props> = ({\n  card,\n  forvardedRef,\n  onTransitionEnd,\n  isBack,\n}) => {\n  const getCardStyle = () => (card ? { color: card.color } : undefined);\n\n  return (\n    <div\n      className=\"card\"\n      ref={forvardedRef}\n      onTransitionEnd={onTransitionEnd}\n      style={getCardStyle()}\n    >\n      {isBack && <div className=\"card__back\" />}\n      {card && !isBack && (\n        <>\n          <div className=\"card__mark\">{card.value}</div>\n          <div className=\"card__rule\">{card.rule}</div>\n          <div className=\"card__mark card__mark--revert\">{card.value}</div>\n        </>\n      )}\n    </div>\n  );\n};\n","import { Card, CardSuit, CardValue, Color } from \"./_types\";\n\nexport class Deck {\n  private cardSuits: Array<CardSuit> = [\n    {\n      value: \"♠\",\n      color: Color.Black,\n    },\n    {\n      value: \"♣\",\n      color: Color.Black,\n    },\n    {\n      value: \"♥\",\n      color: Color.Red,\n    },\n    {\n      value: \"♦\",\n      color: Color.Red,\n    },\n  ];\n\n  private cardValues: Array<CardValue> = [\n    {\n      value: \"6\",\n      rule: \"Ничего\",\n    },\n    {\n      value: \"7\",\n      rule: \"Считаем (кроме семерок)\",\n    },\n    {\n      value: \"8\",\n      rule: \"Пей и выбирай с кем\",\n    },\n    {\n      value: \"9\",\n      rule: \"Действие перед тем как выпить\",\n    },\n    {\n      value: \"10\",\n      rule: \"Задавай вопросы на зло другим\",\n    },\n    {\n      value: \"J\",\n      rule: \"Категория\",\n    },\n    {\n      value: \"Q\",\n      rule: \"Реакция. Кто последний, тот пьет\",\n    },\n    {\n      value: \"K\",\n      rule: \"Выбирай кто пьет\",\n    },\n    {\n      value: \"A\",\n      rule: \"Пей сам\",\n    },\n  ];\n\n  deck: Array<Card> = [];\n\n  constructor() {\n    this.initDeck();\n  }\n\n  initDeck() {\n    this.deck = [];\n    this.cardSuits.forEach((suit) => {\n      this.cardValues.forEach((value) => {\n        this.deck.push({\n          value: `${value.value}${suit.value}`,\n          rule: value.rule,\n          color: suit.color,\n        });\n      });\n    });\n    this.shuffle();\n  }\n\n  shuffle() {\n    var j, temp;\n    for (var i = this.deck.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = this.deck[j];\n      this.deck[j] = this.deck[i];\n      this.deck[i] = temp;\n    }\n  }\n\n  getTotalCard() {\n    return this.deck.length;\n  }\n}\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Card } from \"../components/Card\";\nimport { Deck, Card as CardType } from \"../lib/Deck\";\nimport \"./App.css\";\n\nconst deckInstace = new Deck();\n\nexport const App: FC = () => {\n  const [deck, setDeck] = useState<Array<CardType>>([]);\n  const [shouldShowBackCard, setShouldShowBackCard] = useState(true);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setDeck(deckInstace.deck);\n    console.log(deckInstace.getTotalCard());\n  }, []);\n\n  const handleClickCard = () => {\n    if (cardRef.current) {\n      cardRef.current.style.transform = \"translateX(110%)\";\n      cardRef.current.style.transition = \"transform 200ms ease-out\";\n    }\n  };\n\n  const handleClickBackCard = () => {\n    setShouldShowBackCard(false);\n  };\n\n  const handleClickReload = () => {\n    setShouldShowBackCard(true);\n    deckInstace.initDeck();\n    setDeck(deckInstace.deck);\n  };\n\n  const onTransitionEnd = () => {\n    if (cardRef.current) {\n      cardRef.current.style.transform = \"\";\n      cardRef.current.style.transition = \"\";\n    }\n    const newDeck = [...deck];\n    newDeck.splice(0, 1);\n    setDeck(newDeck);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__deck\">\n        <button className=\"app__reload\" onClick={handleClickReload}>\n          Сначала\n        </button>\n        {deck.length && (\n          <div className=\"app__card\" onClick={handleClickCard}>\n            {deck[1] && <Card card={deck[1]} />}\n\n            {deck[0] && (\n              <Card\n                card={deck[0]}\n                forvardedRef={cardRef}\n                onTransitionEnd={onTransitionEnd}\n              />\n            )}\n          </div>\n        )}\n\n        {shouldShowBackCard && (\n          <div className=\"app__card\" onClick={handleClickBackCard}>\n            <Card isBack />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}